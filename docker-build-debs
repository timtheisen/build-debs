#!/bin/bash

usage() {
    echo "Usage: $(basename $0) debian-directory source-tarball"
}

if [ $# -ne 2 ]; then
    usage
    exit 1
fi
image_name=builddeb
container_name=builddeb$$
progdir=$(dirname "$0")

for arch in *_*; do

    if ! docker image inspect ${image_name}:${arch} &>/dev/null; then
        docker build ${arch} --tag ${image_name}:${arch}
    fi

    if [ ! -d output/$arch ]; then
        tmp_working_dir=$(mktemp -d "${TMPDIR:-/tmp}/builddeb-XXXXXX")
        cp -pr "$@" ${tmp_working_dir}
        myuid=$(id -u)
        docker run -it --name $container_name  \
            -v "$(cd "$progdir"; pwd):/build-deb:ro"  -v "$tmp_working_dir:/working:rw" \
            -e "myuid=$myuid" \
            -w /working \
            ${image_name}:${arch} sh -c '
            /build-deb/build-deb; ret=$?
            chown $myuid *
            exit $ret' sh build-deb; ret=$?

        if [[ $ret != 0 ]]; then
            echo "Failed with code $ret."
            echo "Output (if any) has been left in $tmp_working_dir."
            echo "Investigate the error with:"
            echo "      docker start $container_name && docker exec -it $container_name bash"
            echo "once done, remove the container with:"
            echo "      docker rm -f $container_name"
            exit $ret
        else
            echo "Successful."
            mkdir -p output/$arch
            if mv "$tmp_working_dir"/* output/$arch; then
                echo "======= Packages put into output/$arch ======="
                rm -rf "$tmp_working_dir"
            else
                echo "Error transferring output."
                echo "Output has been left in $tmp_working_dir."
            fi
            rmdir working &>/dev/null || :
            docker stop $container_name &>/dev/null || :
            docker rm $container_name >/dev/null
        fi
    fi

done
